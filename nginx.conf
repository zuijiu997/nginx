
user  root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" ''$status $body_bytes_sent "$http_referer" ''"$http_user_agent" "$http_x_forwarded_for"';

#access_log  logs/access.log  main;

    sendfile        on;
#tcp_nopush     on;

#keepalive_timeout  0;
#  keepalive_timeout  65;

#gzip  on;
    lua_package_path "/usr/local/openresty/lualib/kafka/?.lua;;";  
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";  
    kafka;
    kafka_broker_list 47.107.172.115:9092;

    log_format main_gif '{"remote_addr":  "$remote_addr", "http_x_forwarded_for": "$http_x_forwarded_for", "msec": $msec,"time_local": "$time_local","request": "$request","request_body": "$body_data","cookie_source": "$cookie_source","status": $status,"http_referer": "$http_referer","http_user_agent": "$http_user_agent", "body_data": "$body_data"}';
    server {
        listen       80;
        server_name  _;

#charset koi8-r;

#access_log  logs/host.access.log  main;

#  location / {
#      root   html;
#      index  index.html index.htm;
#  }
        location / {
#root   html;
#index  index.html index.htm;
            access_by_lua_file /usr/local/nginx/lua/hello.lua;
        }

        location /lua/1.gif{
            proxy_method GET;
            proxy_pass http://127.0.0.1/result;
            if ($time_iso8601 ~ "^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})") {}
            access_log /var/logs/access_lua_gif_${year}${month}${day}.log main_gif;
            open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;
#           default_type image/gif;

#可以获取Cookie中的值
            set $cookie_source "";
            if ($http_cookie ~* "source=(.+)(?:;|$)" ) {
                set $cookie_source $1;
            }
            #lua_code_cache off;
            set $body_data '';

            content_by_lua_block {
                    -- 用户跟踪cookie名为__utrace
                    local uid = ngx.var.cookie___utrace      
                    if not uid then
                        -- 如果没有则生成一个跟踪cookie，算法为md5(时间戳+IP+客户端信息)
                        uid = ngx.md5(ngx.now() .. ngx.var.remote_addr .. ngx.var.http_user_agent)
                        ngx.header['Set-Cookie'] = {'__utrace=' .. uid .. '; path=/'}
                    end 
                    ngx.var.cookie_source = '__utrace=' .. uid
                    ngx.req.read_body()
                    local data = ngx.req.get_body_data()
                    ngx.var.body_data = data
                    -- 必须要有
                    ngx.say("body: ", data)
                    -- 引入lua所有api  
                    local cjson = require "cjson"  
                    local producer = require "resty.kafka.producer"  
                    -- 定义kafka broker地址，ip需要和kafka的host.name配置一致  
                    local broker_list = {  
                        { host = "47.107.172.115", port = 9092 },  
                    }  
                    -- 定义json便于日志数据整理收集  
                    local log_json = {}  
                    log_json["uri"]=ngx.var.uri  
                    log_json["args"]=ngx.var.args  
                    for key, value in pairs(ngx.req.get_uri_args()) do      
                        log_json[key] = value  
                    end
                    log_json["host"]=ngx.var.host  
                    log_json["request_body"]=ngx.var.request_body
                    ngx.req.read_body()
                    for key, value in pairs(ngx.req.get_post_args()) do
                        log_json[key] = value
                    end
                    log_json["remote_addr"] = ngx.var.remote_addr  
                    log_json["msec"] = ngx.var.msec  
                    log_json["cookie_source"] = ngx.var.cookie_source  
                    log_json["remote_user"] = ngx.var.remote_user  
                    log_json["time_local"] = ngx.var.time_local  
                    log_json["status"] = ngx.var.status  
                    log_json["body_bytes_sent"] = ngx.var.body_bytes_sent  
                    log_json["http_referer"] = ngx.var.http_referer  
                    log_json["http_user_agent"] = ngx.var.http_user_agent  
                    log_json["http_x_forwarded_for"] = ngx.var.http_x_forwarded_for  
                    log_json["upstream_response_time"] = ngx.var.upstream_response_time  
                    log_json["request_time"] = ngx.var.request_time  
                    -- 转换json为字符串  
                    local message = cjson.encode(log_json);  
                    -- 定义kafka异步生产者  
                    local bp = producer:new(broker_list, { producer_type = "async" })  
                    -- 发送日志消息,send第二个参数key,用于kafka路由控制:  
                    -- key为nill(空)时，一段时间向同一partition写入数据  
                    -- 指定key，按照key的hash写入到对应的partition  
                    local ok, err = bp:send("test1", nil, message)  

                    if not ok then  
                        ngx.log(ngx.ERR, "kafka send err:", err)  
                        return  
                    end  
     
            }
#etag on;
#           expires off;
#           add_header Last-Modified '';
#           add_header Cache-Control 'no-cache';
#           add_header Pragma "no-cache";
#           empty_gif;
#           log_by_lua
#           rewrite_by_lua
#            access_by_lua '  
#                -- 引入lua所有api  
#                local cjson = require "cjson"  
#                local producer = require "resty.kafka.producer"  
#                -- 定义kafka broker地址，ip需要和kafka的host.name配置一致  
#                local broker_list = {  
#                    { host = "47.107.172.115", port = 9092 },  
#                }  
#                -- 定义json便于日志数据整理收集  
#                local log_json = {}  
#                log_json["uri"]=ngx.var.uri  
#                log_json["args"]=ngx.var.args  
#                for key, value in pairs(ngx.req.get_uri_args()) do      
#                    log_json[key] = value  
#                end
#                log_json["host"]=ngx.var.host  
#                log_json["request_body"]=ngx.var.request_body
#                ngx.req.read_body()
#                for key, value in pairs(ngx.req.get_post_args()) do
#                    log_json[key] = value
#                end
#                log_json["remote_addr"] = ngx.var.remote_addr  
#                log_json["remote_user"] = ngx.var.remote_user  
#                log_json["time_local"] = ngx.var.time_local  
#                log_json["status"] = ngx.var.status  
#                log_json["body_bytes_sent"] = ngx.var.body_bytes_sent  
#                log_json["http_referer"] = ngx.var.http_referer  
#                log_json["http_user_agent"] = ngx.var.http_user_agent  
#                log_json["http_x_forwarded_for"] = ngx.var.http_x_forwarded_for  
#                log_json["upstream_response_time"] = ngx.var.upstream_response_time  
#                log_json["request_time"] = ngx.var.request_time  
#                -- 转换json为字符串  
#                local message = cjson.encode(log_json);  
#                -- 定义kafka异步生产者  
#                local bp = producer:new(broker_list, { producer_type = "async" })  
#                -- 发送日志消息,send第二个参数key,用于kafka路由控制:  
#                -- key为nill(空)时，一段时间向同一partition写入数据  
#                -- 指定key，按照key的hash写入到对应的partition  
#                local ok, err = bp:send("test1", nil, message)  
#
#                if not ok then  
#                    ngx.log(ngx.ERR, "kafka send err:", err)  
#                        return  
#                        end  
#                        ';
#empty_gif;  
#error_page 405 =200 $uri;
        }

        location = /result {
#          if ($time_iso8601 ~ "^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})") {}
            access_log off;
            default_type image/gif;

#可以获取Cookie中的值
#          set $cookie_source "";
#          if ($http_cookie ~* "source=(.+)(?:;|$)" ) {
#              set $cookie_source $1;
#          }
#etag on;
            expires off;
            add_header Last-Modified '';
            add_header Cache-Control 'no-cache';
            add_header Pragma "no-cache";
            empty_gif;
#          log_by_lua '  
#              -- 引入lua所有api  
#              local cjson = require "cjson"  
#              local producer = require "resty.kafka.producer"  
#              -- 定义kafka broker地址，ip需要和kafka的host.name配置一致  
#              local broker_list = {  
#                  { host = "47.107.172.115", port = 9092 },  
#              }  
#              -- 定义json便于日志数据整理收集  
#              local log_json = {}  
#              log_json["uri"]=ngx.var.uri  
#              log_json["args"]=ngx.var.args  
#              log_json["host"]=ngx.var.host  
#              log_json["request_body"]=ngx.var.request_body  
#              log_json["remote_addr"] = ngx.var.remote_addr  
#              log_json["remote_user"] = ngx.var.remote_user  
#              log_json["time_local"] = ngx.var.time_local  
#              log_json["status"] = ngx.var.status  
#              log_json["body_bytes_sent"] = ngx.var.body_bytes_sent  
#              log_json["http_referer"] = ngx.var.http_referer  
#              log_json["http_user_agent"] = ngx.var.http_user_agent  
#              log_json["http_x_forwarded_for"] = ngx.var.http_x_forwarded_for  
#              log_json["upstream_response_time"] = ngx.var.upstream_response_time  
#              log_json["request_time"] = ngx.var.request_time  
#              -- 转换json为字符串  
#              local message = cjson.encode(log_json);  
#              -- 定义kafka异步生产者  
#              local bp = producer:new(broker_list, { producer_type = "async" })  
#              -- 发送日志消息,send第二个参数key,用于kafka路由控制:  
#              -- key为nill(空)时，一段时间向同一partition写入数据  
#              -- 指定key，按照key的hash写入到对应的partition  
#              local ok, err = bp:send("test1", nil, message)  

#              if not ok then  
#                  ngx.log(ngx.ERR, "kafka send err:", err)  
#                      return  
#                      end  
#                      ';

#root   html;
#index  index.html index.htm;


        }


# error_page   405 =200 @405;
# location @405 {
#     root   html;
#     index  index.html index.htm;
# }

#location = /kafka/track {
#    kafka_topic track1;
#}


        location /logs/1.gif {
            if ($time_iso8601 ~ "^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})") {}
            access_log /var/logs/access_gif_${year}${month}${day}.log main_gif;
            default_type image/gif;

#可以获取Cookie中的值
            set $cookie_source "";
            if ($http_cookie ~* "source=(.+)(?:;|$)" ) {
                set $cookie_source $1;
            }

#etag on;
            expires off;
            add_header Last-Modified '';
            add_header Cache-Control 'no-cache';
            add_header Pragma "no-cache";

            empty_gif;
        }


#error_page  404              /404.html;

# redirect server error pages to the static page /50x.html
#
#error_page   500 502 503 504  /50x.html;
#location = /50x.html {
#    root   html;
#}

# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
#    proxy_pass   http://127.0.0.1;
#}

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
#    root           html;
#    fastcgi_pass   127.0.0.1:9000;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#    include        fastcgi_params;
#}

# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
#    deny  all;
#}
    }


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}

}
